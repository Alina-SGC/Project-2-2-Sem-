import requests
import logging
from typing import Optional, Dict

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.append(str(Path(__file__).parent.parent))
from config.config import WEATHER_API_KEY

class WeatherAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API OpenWeatherMap."""

    BASE_URL = "http://api.openweathermap.org/data/2.5/"

    @staticmethod
    def get_weather(city: str, lang: str = 'ru') -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞."""
        try:
            response = requests.get(
                f"{WeatherAPI.BASE_URL}weather",
                params={
                    'q': city,
                    'appid': WEATHER_API_KEY,
                    'units': 'metric',
                    'lang': lang
                },
                timeout=10
            )
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logging.error(f"Weather API error: {e}")
            return None

    @staticmethod
    def get_forecast(city: str, lang: str = 'ru') -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ 4 –¥–Ω—è."""
        try:
            response = requests.get(
                f"{WeatherAPI.BASE_URL}forecast",
                params={
                    'q': city,
                    'appid': WEATHER_API_KEY,
                    'units': 'metric',
                    'lang': lang,
                    'cnt': 4  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∞
                },
                timeout=10
            )
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logging.error(f"Weather forecast API error: {e}")
            return None

    @staticmethod
    def format_weather(data: Dict, lang: str = 'ru') -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç."""
        if not data:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ" if lang == 'ru' else "Failed to get weather data"

        weather = data['weather'][0]
        main = data['main']

        if lang == 'ru':
            return (
                f"–ü–æ–≥–æ–¥–∞ –≤ {data['name']}:\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {main['temp']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {main['feels_like']}¬∞C)\n"
                f"‚òÅ {weather['description'].capitalize()}\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {main['humidity']}%\n"
                f"üå¨ –í–µ—Ç–µ—Ä: {data['wind']['speed']} –º/—Å"
            )
        else:
            return (
                f"Weather in {data['name']}:\n"
                f"üå° Temperature: {main['temp']}¬∞C (feels like {main['feels_like']}¬∞C)\n"
                f"‚òÅ {weather['description'].capitalize()}\n"
                f"üíß Humidity: {main['humidity']}%\n"
                f"üå¨ Wind: {data['wind']['speed']} m/s"
            )

    @staticmethod
    def format_forecast(data: Dict, lang: str = 'ru') -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç."""
        if not data or 'list' not in data:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã" if lang == 'ru' else "Failed to get weather forecast"

        city = data['city']['name']

        if lang == 'ru':
            result = [f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city} –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏:\n"]
            for item in data['list']:
                date = item['dt_txt']
                weather = item['weather'][0]
                main = item['main']
                result.append(
                    f"\nüìÖ {date}\n"
                    f"üå° {main['temp']}¬∞C, {weather['description']}\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {main['humidity']}%"
                )
        else:
            result = [f"Weather forecast in {city} for upcoming days:\n"]
            for item in data['list']:
                date = item['dt_txt']
                weather = item['weather'][0]
                main = item['main']
                result.append(
                    f"\nüìÖ {date}\n"
                    f"üå° {main['temp']}¬∞C, {weather['description']}\n"
                    f"üíß Humidity: {main['humidity']}%"
                )

        return "\n".join(result)
