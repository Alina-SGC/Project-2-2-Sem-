import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from config.config import BOT_TOKEN, LOG_FILE, LOG_FORMAT, ADMINS
from storage.storage import user_storage
from services.weather_api import WeatherAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format=LOG_FORMAT,
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
TEXTS = {
    'ru': {
        'welcome': "–ü—Ä–∏–≤–µ—Ç, {name}! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        'language_set': "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π",
        'current_city': "–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: <b>{city}</b>",
        'weather_buttons': "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.",
        'ask_city': "–Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–∫–∞–∂–∏, –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤–µ—à—å?\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
        'weather_request': "‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...",
        'forecast_request': "‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã...",
        'no_city': "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ üèôÔ∏è'",
        'weather_error': "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        'forecast_error': "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        'change_city_prompt': "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:",
        'city_check': "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –≥–æ—Ä–æ–¥...",
        'city_invalid': "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        'city_saved': "–ì–æ—Ä–æ–¥ <b>{city}</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É.",
        'help_text': (
            "üìù <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "üå§Ô∏è <b>–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É</b> - —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ\n"
            "üìÖ <b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 4 –¥–Ω—è</b> - –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏\n"
            "üèôÔ∏è <b>–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥</b> - –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã\n"
            "üåê <b>–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫</b> - –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n"
            "‚ùì <b>–ü–æ–º–æ—â—å</b> - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n"
            "/weather, /forecast, /change_city, /change_language, /help\n"
        ),
        'admin_help': (
            "\n<b>–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            "/ban (user_id) - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/unban (user_id) - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/broadcast (—Å–æ–æ–±—â–µ–Ω–∏–µ) - —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        ),
        'buttons': {
            'weather': "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É üå§Ô∏è",
            'forecast': "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 4 –¥–Ω—è üìÖ",
            'change_city': "–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ üèôÔ∏è",
            'change_language': "–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ üåê",
            'help': "–ü–æ–º–æ—â—å ‚ùì"
        }
    },
    'en': {
        'welcome': "Hello, {name}! Choose your language:",
        'language_set': "Language set to: English",
        'current_city': "Your current city: <b>{city}</b>",
        'weather_buttons': "Use the buttons below to interact with the bot.",
        'ask_city': "I'm a weather bot. First, tell me what city you live in?\n\nPlease enter your city name:",
        'weather_request': "‚è≥ Requesting weather data...",
        'forecast_request': "‚è≥ Requesting weather forecast...",
        'no_city': "Please set your city first by clicking 'Change city üèôÔ∏è'",
        'weather_error': "Failed to get weather data. Please try again later.",
        'forecast_error': "Failed to get weather forecast. Please try again later.",
        'change_city_prompt': "Enter your city name:",
        'city_check': "‚è≥ Checking city...",
        'city_invalid': "Couldn't find this city. Please try again.",
        'city_saved': "City <b>{city}</b> saved!\nNow you can check the weather.",
        'help_text': (
            "üìù <b>Available commands:</b>\n\n"
            "üå§Ô∏è <b>Get weather</b> - current weather in your city\n"
            "üìÖ <b>4-day forecast</b> - weather forecast for upcoming days\n"
            "üèôÔ∏è <b>Change city</b> - change city for weather forecast\n"
            "üåê <b>Change language</b> - change interface language\n"
            "‚ùì <b>Help</b> - show this message\n\n"
            "You can also use commands:\n"
            "/weather, /forecast, /change_city, /change_language, /help"
        ),
        'admin_help': (
            "\n\n<b>Admin commands:</b>\n"
            "/stats - bot statistics\n"
            "/ban (user_id) - ban user\n"
            "/unban (user_id) - unban user\n"
            "/broadcast (message) - send message to all users"
        ),
        'buttons': {
            'weather': "Get weather üå§Ô∏è",
            'forecast': "4-day forecast üìÖ",
            'change_city': "Change city üèôÔ∏è",
            'change_language': "Change language üåê",
            'help': "Help ‚ùì"
        }
    }
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class WeatherStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞ –¥–ª—è –±–æ—Ç–∞."""
    waiting_for_city = State()
    waiting_for_language = State()


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(lang: str = 'ru'):
    texts = TEXTS[lang]['buttons']
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=texts['weather']), KeyboardButton(text=texts['forecast'])],
            [KeyboardButton(text=texts['change_city']), KeyboardButton(text=texts['change_language'])],
            [KeyboardButton(text=texts['help'])]
        ],
        resize_keyboard=True
    )


def get_language_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
             InlineKeyboardButton(text="English", callback_data="lang_en")]
        ]
    )


# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞
@dp.message.middleware()
async def check_ban_middleware(handler, event, data):
    user_id = event.from_user.id
    if user_storage.is_banned(user_id):
        lang = user_storage.get_user_language(user_id)
        await event.answer(
            "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞" if lang == 'ru' else "üö´ You are banned and cannot use the bot")
        return
    return await handler(event, data)


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer(
        TEXTS['ru']['welcome'].format(name=message.from_user.first_name),
        reply_markup=get_language_keyboard()
    )
    await state.set_state(WeatherStates.waiting_for_language)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.callback_query(F.data.startswith("lang_"))
async def set_language(callback: types.CallbackQuery, state: FSMContext):
    lang = callback.data.split("_")[1]
    user_id = callback.from_user.id
    user_storage.set_user_language(user_id, lang)

    await callback.message.edit_text(
        TEXTS[lang]['language_set']
    )

    city = user_storage.get_user_city(user_id)
    if city:
        await callback.message.answer(
            f"{TEXTS[lang]['current_city'].format(city=city)}\n"
            f"{TEXTS[lang]['weather_buttons']}",
            reply_markup=get_main_keyboard(lang)
        )
    else:
        await callback.message.answer(
            TEXTS[lang]['ask_city'],
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(WeatherStates.waiting_for_city)
    await callback.answer()


# –ö–æ–º–∞–Ω–¥–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
@dp.message(F.text.in_(
    [TEXTS['ru']['buttons']['change_language'], TEXTS['en']['buttons']['change_language'], "/change_language"]))
async def change_language(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    current_lang = user_storage.get_user_language(user_id)

    await message.answer(
        TEXTS[current_lang]['welcome'].format(name=message.from_user.first_name),
        reply_markup=get_language_keyboard()
    )
    await state.set_state(WeatherStates.waiting_for_language)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–æ–∫)
@dp.message(F.text.in_([TEXTS['ru']['buttons']['weather'], TEXTS['en']['buttons']['weather'], "/weather"]))
async def get_weather(message: types.Message):
    user_id = message.from_user.id
    city = user_storage.get_user_city(user_id)
    lang = user_storage.get_user_language(user_id)

    if not city:
        await message.answer(TEXTS[lang]['no_city'])
        return

    user_storage.increment_stat('weather_requests')
    await message.answer(TEXTS[lang]['weather_request'])

    weather_data = WeatherAPI.get_weather(city, lang)
    if weather_data:
        await message.answer(WeatherAPI.format_weather(weather_data, lang))
    else:
        await message.answer(TEXTS[lang]['weather_error'])


@dp.message(F.text.in_([TEXTS['ru']['buttons']['forecast'], TEXTS['en']['buttons']['forecast'], "/forecast"]))
async def get_forecast(message: types.Message):
    user_id = message.from_user.id
    city = user_storage.get_user_city(user_id)
    lang = user_storage.get_user_language(user_id)

    if not city:
        await message.answer(TEXTS[lang]['no_city'])
        return

    user_storage.increment_stat('forecast_requests')
    await message.answer(TEXTS[lang]['forecast_request'])

    forecast_data = WeatherAPI.get_forecast(city, lang)
    if forecast_data:
        await message.answer(WeatherAPI.format_forecast(forecast_data, lang))
    else:
        await message.answer(TEXTS[lang]['forecast_error'])


@dp.message(F.text.in_([TEXTS['ru']['buttons']['change_city'], TEXTS['en']['buttons']['change_city'], "/change_city"]))
async def change_city(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = user_storage.get_user_language(user_id)

    await message.answer(
        TEXTS[lang]['change_city_prompt'],
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(WeatherStates.waiting_for_city)


@dp.message(F.text.in_([TEXTS['ru']['buttons']['help'], TEXTS['en']['buttons']['help'], "/help"]))
async def show_help(message: types.Message):
    user_id = message.from_user.id
    lang = user_storage.get_user_language(user_id)

    help_text = TEXTS[lang]['help_text']
    if user_id in ADMINS:
        help_text += TEXTS[lang]['admin_help']

    await message.answer(
        help_text,
        reply_markup=get_main_keyboard(lang)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
@dp.message(WeatherStates.waiting_for_city)
async def process_city(message: types.Message, state: FSMContext):
    city = message.text.strip()
    user_id = message.from_user.id
    lang = user_storage.get_user_language(user_id)

    if len(city) < 2:
        await message.answer(TEXTS[lang]['city_invalid'])
        return

    await message.answer(TEXTS[lang]['city_check'])

    weather_data = WeatherAPI.get_weather(city, lang)
    if not weather_data or 'cod' not in weather_data or weather_data['cod'] != 200:
        await message.answer(TEXTS[lang]['city_invalid'])
        return

    user_storage.set_user_city(user_id, city)
    await state.clear()
    await message.answer(
        TEXTS[lang]['city_saved'].format(city=city),
        reply_markup=get_main_keyboard(lang)
    )


# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    if message.from_user.id not in ADMINS:
        return

    stats = user_storage.get_stats()
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}\n"
        f"üå§Ô∏è –ó–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–≥–æ–¥—ã: {stats['weather_requests']}\n"
        f"üìÖ –ó–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞: {stats['forecast_requests']}"
    )


@dp.message(Command("ban"))
async def cmd_ban(message: types.Message):
    if message.from_user.id not in ADMINS:
        return

    try:
        user_id = int(message.text.split()[1])
        user_storage.ban_user(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    except (IndexError, ValueError):
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id>")


@dp.message(Command("unban"))
async def cmd_unban(message: types.Message):
    if message.from_user.id not in ADMINS:
        return

    try:
        user_id = int(message.text.split()[1])
        user_storage.unban_user(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    except (IndexError, ValueError):
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id>")


@dp.message(Command("broadcast"))
async def cmd_broadcast(message: types.Message):
    if message.from_user.id not in ADMINS:
        return

    if len(message.text.split()) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return


    broadcast_text = ' '.join(message.text.split()[1:])
    users = user_storage.data.keys()
    success = 0
    failed = 0

    await message.answer(f"‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞ –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    for user_id in users:
        try:
            await bot.send_message(user_id, broadcast_text)
            success += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –¥–ª—è {user_id}: {e}")
            failed += 1
        await asyncio.sleep(0.1)

    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
        f"–£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}"
    )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    try:
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
